{"version":3,"sources":["BlogListItem.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["BlogListItem","props","this","title","blog","date","Card","CardHeader","action","IconButton","aria-label","subheader","CardMedia","image","CardContent","Typography","variant","color","component","CardActions","disableSpacing","React","Component","Form","makeStyles","theme","root","display","flexWrap","textField","marginLeft","spacing","marginRight","width","addblog","item","callBack","setState","blogList","state","concat","localStorage","setItem","JSON","stringify","getItem","parse","dateFull","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","dateDisplay","className","onSubmit","e","preventDefault","titleElement","target","elements","blogElement","timeValue","value","index","length","TextField","id","label","style","margin","placeholder","helperText","fullWidth","InputLabelProps","shrink","Button","type","reverse","map","blogs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6e6759c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './BlogListItem.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Typography from '@material-ui/core/Typography';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nclass BlogListItem extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      const {\n        title,\n        blog,\n        date\n      } = this.props;\n\n      return (\n        <Card>\n        <CardHeader\n          action={\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          }\n          title={title}\n          subheader={date}\n        />\n        <CardMedia\n          image=\"/static/images/cards/paella.jpg\"\n          title={title}\n        />\n        <CardContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {blog}\n          </Typography>\n        </CardContent>\n        <CardActions disableSpacing>\n          <IconButton aria-label=\"add to favorites\">\n            <FavoriteIcon />\n          </IconButton>\n          <IconButton aria-label=\"share\">\n            <ShareIcon />\n          </IconButton>\n          <IconButton\n            aria-label=\"show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n      )\n    }\n  }\nexport default BlogListItem;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Form.css';\nimport BlogListItem from './BlogListItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: '25ch',\n    },\n  }));\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        if(!localStorage.getItem(\"blogList\")){\n            this.state = {blogList: []};\n            localStorage.setItem(\"blogList\", JSON.stringify(this.state.blogList));\n        }else{\n            this.state = {blogList: JSON.parse(localStorage.getItem(\"blogList\"))}\n        }\n    }\n\n    addblog = (item, callBack) => {\n        this.setState(\n          {\n            blogList: this.state.blogList.concat(item)\n          },\n          () => {\n            localStorage.setItem(\"blogList\", JSON.stringify(this.state.blogList))\n            callBack && callBack()\n          }\n        )\n      }\n\n    render() {\n        const userList = JSON.parse(localStorage.getItem(\"userList\"));\n        //const classes = useStyles();\n        const dateFull =new Date();\n\n        const year = dateFull.getFullYear();\n        const month = dateFull.getMonth()+1;\n        const day = dateFull.getDate();\n        const hour = dateFull.getHours();\n        const minute = dateFull.getMinutes();\n        \n        const dateDisplay = `${year}/${month}/${day} ${hour}:${minute}`; \n\n        return (\n            <div>\n                <div className=\"form\">\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            const titleElement = e.target.elements[\"titlefield\"];\n                            const blogElement = e.target.elements[\"outlined-full-width\"];\n                            const timeValue = dateDisplay;\n                                this.addblog(\n                                    {\n                                        title: titleElement.value,\n                                        blog: blogElement.value,\n                                        date: timeValue,\n                                        index: this.state.blogList.length\n                                    },\n                                    () => {\n                                        titleElement.value = \"\";\n                                        blogElement.value = \"\";\n                                    }\n                                )\n                        }}\n                    >\n                        <div className=\"form-input\">\n                            <TextField\n                                id=\"titlefield\"\n                                label=\"title\"\n                                style={{ margin: 8 }}\n                                placeholder=\"title\"\n                                helperText=\"\"\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                id=\"outlined-full-width\"\n                                label=\"blog\"\n                                style={{ margin: 8 }}\n                                placeholder=\"Jot something down\"\n                                helperText=\"\"\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                            />\n                        </div>\n                        <div className=\"form-button\">\n                            <Button\n                                variant=\"contained\"\n                                type=\"submit\"\n                            >\n                                Send\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n                {this.state.blogList.reverse().map(blogs => (\n                    <BlogListItem\n                        title={blogs.title}\n                        blog={blogs.blog}\n                        date={blogs.date}\n                        index={blogs.index}\n                    />\n                ))}\n            </div>\n        );\n    }\n  }\n\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Form from './Form';\nimport BlogListItem from './BlogListItem';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App-container\">\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}